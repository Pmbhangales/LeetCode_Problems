15) 1631. Path With Minimum Effort
Difficulty Level: Medium


You are a hiker preparing for an upcoming hike. You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.

A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.

Return the minimum effort required to travel from the top-left cell to the bottom-right cell.

 

Example 1:



Input: heights = [[1,2,2],[3,8,2],[5,3,5]]
Output: 2
Explanation: The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.
This is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3.
Example 2:



Input: heights = [[1,2,3],[3,8,4],[5,3,5]]
Output: 1
Explanation: The route of [1,2,3,4,5] has a maximum absolute difference of 1 in consecutive cells, which is better than route [1,3,5,3,5].
Example 3:


Input: heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]
Output: 0
Explanation: This route does not require any effort.

Solution
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
    public int minimumEffortPath(int[][] heights) {
        int rows = heights.length;
        int columns = heights[0].length;
        int[][] effort = new int[rows][columns];
        
        for (int i = 0; i < rows; i++) {
            Arrays.fill(effort[i], Integer.MAX_VALUE);
        }
        
        PriorityQueue<int[]> minHeap = new PriorityQueue<>((a, b) -> a[2] - b[2]);
        minHeap.offer(new int[]{0, 0, 0}); // {x, y, currentEffort}
        
        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        
        while (!minHeap.isEmpty()) {
            int[] current = minHeap.poll();
            int x = current[0];
            int y = current[1];
            int currentEffort = current[2];
            
            if (x == rows - 1 && y == columns - 1) {
                return currentEffort;
            }
            
            for (int[] direction : directions) {
                int newX = x + direction[0];
                int newY = y + direction[1];
                
                if (newX >= 0 && newX < rows && newY >= 0 && newY < columns) {
                    int newEffort = Math.max(currentEffort, Math.abs(heights[newX][newY] - heights[x][y]));
                    
                    if (newEffort < effort[newX][newY]) {
                        effort[newX][newY] = newEffort;
                        minHeap.offer(new int[]{newX, newY, newEffort});
                    }
                }
            }
        }
        
        return -1; 
    }
}
