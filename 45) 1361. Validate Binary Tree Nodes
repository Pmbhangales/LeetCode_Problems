45) 1361. Validate Binary Tree Nodes


Difficulty Level: Medium


You have n binary tree nodes numbered from 0 to n - 1 where node i has two children leftChild[i] and rightChild[i], return true if and only if all the given nodes form exactly one valid binary tree.

If node i has no left child then leftChild[i] will equal -1, similarly for the right child.

Note that the nodes have no values and that we only use the node numbers in this problem.

 

Example 1:


Input: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]
Output: true
Example 2:


Input: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]
Output: false
Example 3:


Input: n = 2, leftChild = [1,0], rightChild = [-1,-1]
Output: false
 

Constraints:

n == leftChild.length == rightChild.length
1 <= n <= 104
-1 <= leftChild[i], rightChild[i] <= n - 1








Solution
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
    public boolean validateBinaryTreeNodes(int n, int[] leftChild, int[] rightChild) {
        
        Set<Integer> setNoParent = new HashSet<>();

        Set<Integer> values = new HashSet<>();

        Set<Integer> nodes = new HashSet<>();

        for(int i=0; i<n; i++){
          if(leftChild[i]!=-1 || rightChild[i]!=-1){
            setNoParent.add(i);
          }
        }

        

        for(int i=0; i<n; i++)
        {  
          
            if(leftChild[i]!=-1){
              nodes.add(i);
              nodes.add(leftChild[i]);
              if(!values.add(leftChild[i])){
                //System.out.println(1);
                return false;
              }

              if(leftChild[leftChild[i]] == i || rightChild[leftChild[i]] == i){
                //System.out.println(2);
                return false;
              }

              setNoParent.remove(leftChild[i]);
            }

            if(rightChild[i]!=-1){
              nodes.add(rightChild[i]);
              if(!values.add(rightChild[i])){
                //System.out.println(3);
                return false;
              }

              if(leftChild[rightChild[i]] == i || rightChild[rightChild[i]]==i){
                //System.out.println(4);
                return false;
              }

              setNoParent.remove(rightChild[i]);
            }

            if(setNoParent.size()==0 && n>1){
              return false;
            }

            
        
        }

        if(nodes.size()!=n && n>1){
          return false;
        }

        if(setNoParent.size()!=1 && n>1){
          //System.out.println(5+ "  " + setNoParent);
          return false;
        }

        if(setNoParent.size()==1){
            int root = setNoParent.stream().findFirst().get();
            
            removeNode(root,leftChild,rightChild, nodes);

            if(nodes.size()!=0){
                return false;
            }
        }

        

        return true;
    }

    void removeNode(int root, int[] leftChild, int[] rightChild, Set<Integer> nodes){
        nodes.remove(root);
        if(leftChild[root]==-1 && rightChild[root]==-1){
            return;
        }

        int left = leftChild[root];
        if(left!=-1){
            removeNode(left, leftChild, rightChild, nodes);
        }

        int right = rightChild[root];
        if(right!=-1){
            removeNode(right, leftChild, rightChild, nodes);
        }
    }
}
